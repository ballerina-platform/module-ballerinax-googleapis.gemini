components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - '1'
          - '2'
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        default: json
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        default: true
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  requestBodies:
    GenerateContentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateContentRequest'
  securitySchemes:
    default:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: {https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/generative-language.retriever}
  schemas:
    BatchEmbedContentsRequest:
      description: Batch request to get embeddings from the model for a list of prompts.
      properties:
        requests:
          description: >-
            Required. Embed requests for the batch. The model in each of these
            requests must match the model specified
            `BatchEmbedContentsRequest.model`.
          items:
            $ref: '#/components/schemas/EmbedContentRequest'
          type: array
      type: object
    BatchEmbedContentsResponse:
      description: The response to a `BatchEmbedContentsRequest`.
      properties:
        embeddings:
          description: >-
            Output only. The embeddings for each request, in the same order as
            provided in the batch request.
          items:
            $ref: '#/components/schemas/ContentEmbedding'
          readOnly: true
          type: array
      type: object
    Blob:
      description: >-
        Raw media bytes. Text should not be sent as raw bytes, use the 'text'
        field.
      properties:
        data:
          description: Raw bytes for media formats.
          format: byte
          type: string
        mimeType:
          description: >-
            The IANA standard MIME type of the source data. Examples: -
            image/png - image/jpeg If an unsupported MIME type is provided, an
            error will be returned. For a complete list of supported types, see
            [Supported file
            formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats).
          type: string
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    Candidate:
      description: A response candidate generated from the model.
      properties:
        avgLogprobs:
          description: Output only. Average log probability score of the candidate.
          format: double
          readOnly: true
          type: number
        citationMetadata:
          $ref: '#/components/schemas/CitationMetadata'
          description: >-
            Output only. Citation information for model-generated candidate.
            This field may be populated with recitation information for any text
            included in the `content`. These are passages that are "recited"
            from copyrighted material in the foundational LLM's training data.
          readOnly: true
        content:
          $ref: '#/components/schemas/Content'
          description: Output only. Generated content returned from the model.
          readOnly: true
        finishReason:
          description: >-
            Optional. Output only. The reason why the model stopped generating
            tokens. If empty, the model has not stopped generating tokens.
          enum:
            - FINISH_REASON_UNSPECIFIED
            - STOP
            - MAX_TOKENS
            - SAFETY
            - RECITATION
            - LANGUAGE
            - OTHER
            - BLOCKLIST
            - PROHIBITED_CONTENT
            - SPII
            - MALFORMED_FUNCTION_CALL
          readOnly: true
          type: string
        groundingMetadata:
          $ref: '#/components/schemas/GroundingMetadata'
          description: >-
            Output only. Grounding metadata for the candidate. This field is
            populated for `GenerateContent` calls.
          readOnly: true
        index:
          description: >-
            Output only. Index of the candidate in the list of response
            candidates.
          format: int32
          readOnly: true
          type: integer
        logprobsResult:
          $ref: '#/components/schemas/LogprobsResult'
          description: >-
            Output only. Log-likelihood scores for the response tokens and top
            tokens
          readOnly: true
        safetyRatings:
          description: >-
            List of ratings for the safety of a response candidate. There is at
            most one rating per category.
          items:
            $ref: '#/components/schemas/SafetyRating'
          type: array
        tokenCount:
          description: Output only. Token count for this candidate.
          format: int32
          readOnly: true
          type: integer
      type: object
    CitationMetadata:
      description: A collection of source attributions for a piece of content.
      properties:
        citationSources:
          description: Citations to sources for a specific response.
          items:
            $ref: '#/components/schemas/CitationSource'
          type: array
      type: object
    CitationSource:
      description: A citation to a source for a portion of a specific response.
      properties:
        endIndex:
          description: 'Optional. End of the attributed segment, exclusive.'
          format: int32
          type: integer
        license:
          description: >-
            Optional. License for the GitHub project that is attributed as a
            source for segment. License info is required for code citations.
          type: string
        startIndex:
          description: >-
            Optional. Start of segment of the response that is attributed to
            this source. Index indicates the start of the segment, measured in
            bytes.
          format: int32
          type: integer
        uri:
          description: >-
            Optional. URI that is attributed as a source for a portion of the
            text.
          type: string
      type: object
    Content:
      description: >-
        The base structured datatype containing multi-part content of a message.
        A `Content` includes a `role` field designating the producer of the
        `Content` and a `parts` field containing multi-part data that contains
        the content of the message turn.
      properties:
        parts:
          description: >-
            Ordered `Parts` that constitute a single message. Parts may have
            different MIME types.
          items:
            $ref: '#/components/schemas/Part'
          type: array
        role:
          description: >-
            Optional. The producer of the content. Must be either 'user' or
            'model'. Useful to set for multi-turn conversations, otherwise can
            be left blank or unset.
          type: string
      type: object
    ContentEmbedding:
      description: A list of floats representing an embedding.
      properties:
        values:
          description: The embedding values.
          items:
            format: float
            type: number
          type: array
      type: object
    CountTokensRequest:
      description: >-
        Counts the number of tokens in the `prompt` sent to a model. Models may
        tokenize text differently, so each model may return a different
        `token_count`.
      properties:
        contents:
          description: >-
            Optional. The input given to the model as a prompt. This field is
            ignored when `generate_content_request` is set.
          items:
            $ref: '#/components/schemas/Content'
          type: array
        generateContentRequest:
          $ref: '#/components/schemas/GenerateContentRequest'
          description: >-
            Optional. The overall input given to the `Model`. This includes the
            prompt as well as other model steering information like [system
            instructions](https://ai.google.dev/gemini-api/docs/system-instructions),
            and/or function declarations for [function
            calling](https://ai.google.dev/gemini-api/docs/function-calling).
            `Model`s/`Content`s and `generate_content_request`s are mutually
            exclusive. You can either send `Model` + `Content`s or a
            `generate_content_request`, but never both.
      type: object
    CountTokensResponse:
      description: >-
        A response from `CountTokens`. It returns the model's `token_count` for
        the `prompt`.
      properties:
        totalTokens:
          description: >-
            The number of tokens that the `Model` tokenizes the `prompt` into.
            Always non-negative.
          format: int32
          type: integer
      type: object
    CreateTunedModelMetadata:
      description: >-
        Metadata about the state and progress of creating a tuned model returned
        from the long-running operation
      properties:
        completedPercent:
          description: The completed percentage for the tuning operation.
          format: float
          type: number
        completedSteps:
          description: The number of steps completed.
          format: int32
          type: integer
        snapshots:
          description: Metrics collected during tuning.
          items:
            $ref: '#/components/schemas/TuningSnapshot'
          type: array
        totalSteps:
          description: The total number of tuning steps.
          format: int32
          type: integer
        tunedModel:
          description: Name of the tuned model associated with the tuning operation.
          type: string
      type: object
    EmbedContentRequest:
      description: Request containing the `Content` for the model to embed.
      properties:
        content:
          $ref: '#/components/schemas/Content'
          description: >-
            Required. The content to embed. Only the `parts.text` fields will be
            counted.
        model:
          description: >-
            Required. The model's resource name. This serves as an ID for the
            Model to use. This name should match a model name returned by the
            `ListModels` method. Format: `models/{model}`
          type: string
        outputDimensionality:
          description: >-
            Optional. Optional reduced dimension for the output embedding. If
            set, excessive values in the output embedding are truncated from the
            end. Supported by newer models since 2024 only. You cannot set this
            value if using the earlier model (`models/embedding-001`).
          format: int32
          type: integer
        taskType:
          description: >-
            Optional. Optional task type for which the embeddings will be used.
            Can only be set for `models/embedding-001`.
          enum:
            - TASK_TYPE_UNSPECIFIED
            - RETRIEVAL_QUERY
            - RETRIEVAL_DOCUMENT
            - SEMANTIC_SIMILARITY
            - CLASSIFICATION
            - CLUSTERING
            - QUESTION_ANSWERING
            - FACT_VERIFICATION
          type: string
        title:
          description: >-
            Optional. An optional title for the text. Only applicable when
            TaskType is `RETRIEVAL_DOCUMENT`. Note: Specifying a `title` for
            `RETRIEVAL_DOCUMENT` provides better quality embeddings for
            retrieval.
          type: string
      type: object
    EmbedContentResponse:
      description: The response to an `EmbedContentRequest`.
      properties:
        embedding:
          $ref: '#/components/schemas/ContentEmbedding'
          description: Output only. The embedding generated from the input content.
          readOnly: true
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      properties: {}
      type: object
    GenerateContentRequest:
      description: Request to generate a completion from the model.
      properties:
        contents:
          description: >-
            Required. The content of the current conversation with the model.
            For single-turn queries, this is a single instance. For multi-turn
            queries like
            [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat),
            this is a repeated field that contains the conversation history and
            the latest request.
          items:
            $ref: '#/components/schemas/Content'
          type: array
        generationConfig:
          $ref: '#/components/schemas/GenerationConfig'
          description: Optional. Configuration options for model generation and outputs.
        model:
          description: >-
            Required. The name of the `Model` to use for generating the
            completion. Format: `models/{model}`.
          type: string
        safetySettings:
          description: >-
            Optional. A list of unique `SafetySetting` instances for blocking
            unsafe content. This will be enforced on the
            `GenerateContentRequest.contents` and
            `GenerateContentResponse.candidates`. There should not be more than
            one setting for each `SafetyCategory` type. The API will block any
            contents and responses that fail to meet the thresholds set by these
            settings. This list overrides the default settings for each
            `SafetyCategory` specified in the safety_settings. If there is no
            `SafetySetting` for a given `SafetyCategory` provided in the list,
            the API will use the default safety setting for that category. Harm
            categories HARM_CATEGORY_HATE_SPEECH,
            HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,
            HARM_CATEGORY_HARASSMENT are supported. Refer to the
            [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for
            detailed information on available safety settings. Also refer to the
            [Safety
            guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
            learn how to incorporate safety considerations in your AI
            applications.
          items:
            $ref: '#/components/schemas/SafetySetting'
          type: array
      type: object
    GenerateContentResponse:
      description: >-
        Response from the model supporting multiple candidate responses. Safety
        ratings and content filtering are reported for both prompt in
        `GenerateContentResponse.prompt_feedback` and for each candidate in
        `finish_reason` and in `safety_ratings`. The API: - Returns either all
        requested candidates or none of them - Returns no candidates at all only
        if there was something wrong with the prompt (check `prompt_feedback`) -
        Reports feedback on each candidate in `finish_reason` and
        `safety_ratings`.
      properties:
        candidates:
          description: Candidate responses from the model.
          items:
            $ref: '#/components/schemas/Candidate'
          type: array
        modelVersion:
          description: Output only. The model version used to generate the response.
          readOnly: true
          type: string
        promptFeedback:
          $ref: '#/components/schemas/PromptFeedback'
          description: Returns the prompt's feedback related to the content filters.
        usageMetadata:
          $ref: '#/components/schemas/UsageMetadata'
          description: Output only. Metadata on the generation requests' token usage.
          readOnly: true
      type: object
    GenerationConfig:
      description: >-
        Configuration options for model generation and outputs. Not all
        parameters are configurable for every model.
      properties:
        candidateCount:
          description: >-
            Optional. Number of generated responses to return. Currently, this
            value can only be set to 1. If unset, this will default to 1.
          format: int32
          type: integer
        enableEnhancedCivicAnswers:
          description: >-
            Optional. Enables enhanced civic answers. It may not be available
            for all models.
          type: boolean
        frequencyPenalty:
          description: >-
            Optional. Frequency penalty applied to the next token's logprobs,
            multiplied by the number of times each token has been seen in the
            respponse so far. A positive penalty will discourage the use of
            tokens that have already been used, proportional to the number of
            times the token has been used: The more a token is used, the more
            dificult it is for the model to use that token again increasing the
            vocabulary of responses. Caution: A _negative_ penalty will
            encourage the model to reuse tokens proportional to the number of
            times the token has been used. Small negative values will reduce the
            vocabulary of a response. Larger negative values will cause the
            model to start repeating a common token until it hits the
            max_output_tokens limit.
          format: float
          type: number
        logprobs:
          description: >-
            Optional. Only valid if response_logprobs=True. This sets the number
            of top logprobs to return at each decoding step in the
            Candidate.logprobs_result.
          format: int32
          type: integer
        maxOutputTokens:
          description: >-
            Optional. The maximum number of tokens to include in a response
            candidate. Note: The default value varies by model, see the
            `Model.output_token_limit` attribute of the `Model` returned from
            the `getModel` function.
          format: int32
          type: integer
        presencePenalty:
          description: >-
            Optional. Presence penalty applied to the next token's logprobs if
            the token has already been seen in the response. This penalty is
            binary on/off and not dependant on the number of times the token is
            used (after the first). Use frequency_penalty for a penalty that
            increases with each use. A positive penalty will discourage the use
            of tokens that have already been used in the response, increasing
            the vocabulary. A negative penalty will encourage the use of tokens
            that have already been used in the response, decreasing the
            vocabulary.
          format: float
          type: number
        responseLogprobs:
          description: 'Optional. If true, export the logprobs results in response.'
          type: boolean
        stopSequences:
          description: >-
            Optional. The set of character sequences (up to 5) that will stop
            output generation. If specified, the API will stop at the first
            appearance of a `stop_sequence`. The stop sequence will not be
            included as part of the response.
          items:
            type: string
          type: array
        temperature:
          description: >-
            Optional. Controls the randomness of the output. Note: The default
            value varies by model, see the `Model.temperature` attribute of the
            `Model` returned from the `getModel` function. Values can range from
            [0.0, 2.0].
          format: float
          type: number
        topK:
          description: >-
            Optional. The maximum number of tokens to consider when sampling.
            Gemini models use Top-p (nucleus) sampling or a combination of Top-k
            and nucleus sampling. Top-k sampling considers the set of `top_k`
            most probable tokens. Models running with nucleus sampling don't
            allow top_k setting. Note: The default value varies by `Model` and
            is specified by the`Model.top_p` attribute returned from the
            `getModel` function. An empty `top_k` attribute indicates that the
            model doesn't apply top-k sampling and doesn't allow setting `top_k`
            on requests.
          format: int32
          type: integer
        topP:
          description: >-
            Optional. The maximum cumulative probability of tokens to consider
            when sampling. The model uses combined Top-k and Top-p (nucleus)
            sampling. Tokens are sorted based on their assigned probabilities so
            that only the most likely tokens are considered. Top-k sampling
            directly limits the maximum number of tokens to consider, while
            Nucleus sampling limits the number of tokens based on the cumulative
            probability. Note: The default value varies by `Model` and is
            specified by the`Model.top_p` attribute returned from the `getModel`
            function. An empty `top_k` attribute indicates that the model
            doesn't apply top-k sampling and doesn't allow setting `top_k` on
            requests.
          format: float
          type: number
      type: object
    GroundingChunk:
      description: Grounding chunk.
      properties:
        web:
          $ref: '#/components/schemas/Web'
          description: Grounding chunk from the web.
      type: object
    GroundingMetadata:
      description: Metadata returned to client when grounding is enabled.
      properties:
        groundingChunks:
          description: >-
            List of supporting references retrieved from specified grounding
            source.
          items:
            $ref: '#/components/schemas/GroundingChunk'
          type: array
        groundingSupports:
          description: List of grounding support.
          items:
            $ref: '#/components/schemas/GroundingSupport'
          type: array
        retrievalMetadata:
          $ref: '#/components/schemas/RetrievalMetadata'
          description: Metadata related to retrieval in the grounding flow.
        searchEntryPoint:
          $ref: '#/components/schemas/SearchEntryPoint'
          description: Optional. Google search entry for the following-up web searches.
        webSearchQueries:
          description: Web search queries for the following-up web search.
          items:
            type: string
          type: array
      type: object
    GroundingSupport:
      description: Grounding support.
      properties:
        confidenceScores:
          description: >-
            Confidence score of the support references. Ranges from 0 to 1. 1 is
            the most confident. This list must have the same size as the
            grounding_chunk_indices.
          items:
            format: float
            type: number
          type: array
        groundingChunkIndices:
          description: >-
            A list of indices (into 'grounding_chunk') specifying the citations
            associated with the claim. For instance [1,3,4] means that
            grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the
            retrieved content attributed to the claim.
          items:
            format: int32
            type: integer
          type: array
        segment:
          $ref: '#/components/schemas/Segment'
          description: Segment of the content this support belongs to.
      type: object
    ListModelsResponse:
      description: Response from `ListModel` containing a paginated list of Models.
      properties:
        models:
          description: The returned Models.
          items:
            $ref: '#/components/schemas/Model'
          type: array
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no more pages.
          type: string
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          items:
            $ref: '#/components/schemas/Operation'
          type: array
      type: object
    LogprobsResult:
      description: Logprobs Result
      properties:
        chosenCandidates:
          description: >-
            Length = total number of decoding steps. The chosen candidates may
            or may not be in top_candidates.
          items:
            $ref: '#/components/schemas/LogprobsResultCandidate'
          type: array
        topCandidates:
          description: Length = total number of decoding steps.
          items:
            $ref: '#/components/schemas/TopCandidates'
          type: array
      type: object
    LogprobsResultCandidate:
      description: Candidate for the logprobs token and score.
      properties:
        logProbability:
          description: The candidate's log probability.
          format: float
          type: number
        token:
          description: The candidate's token string value.
          type: string
        tokenId:
          description: The candidate's token id value.
          format: int32
          type: integer
      type: object
    Model:
      description: Information about a Generative Language Model.
      properties:
        baseModelId:
          description: >-
            Required. The name of the base model, pass this to the generation
            request. Examples: * `gemini-1.5-flash`
          type: string
        description:
          description: A short description of the model.
          type: string
        displayName:
          description: >-
            The human-readable name of the model. E.g. "Gemini 1.5 Flash". The
            name can be up to 128 characters long and can consist of any UTF-8
            characters.
          type: string
        inputTokenLimit:
          description: Maximum number of input tokens allowed for this model.
          format: int32
          type: integer
        maxTemperature:
          description: The maximum temperature this model can use.
          format: float
          type: number
        name:
          description: >-
            Required. The resource name of the `Model`. Refer to [Model
            variants](https://ai.google.dev/gemini-api/docs/models/gemini#model-variations)
            for all allowed values. Format: `models/{model}` with a `{model}`
            naming convention of: * "{base_model_id}-{version}" Examples: *
            `models/gemini-1.5-flash-001`
          type: string
        outputTokenLimit:
          description: Maximum number of output tokens available for this model.
          format: int32
          type: integer
        supportedGenerationMethods:
          description: >-
            The model's supported generation methods. The corresponding API
            method names are defined as Pascal case strings, such as
            `generateMessage` and `generateContent`.
          items:
            type: string
          type: array
        temperature:
          description: >-
            Controls the randomness of the output. Values can range over
            `[0.0,max_temperature]`, inclusive. A higher value will produce
            responses that are more varied, while a value closer to `0.0` will
            typically result in less surprising responses from the model. This
            value specifies default to be used by the backend while making the
            call to the model.
          format: float
          type: number
        topK:
          description: >-
            For Top-k sampling. Top-k sampling considers the set of `top_k` most
            probable tokens. This value specifies default to be used by the
            backend while making the call to the model. If empty, indicates the
            model doesn't use top-k sampling, and `top_k` isn't allowed as a
            generation parameter.
          format: int32
          type: integer
        topP:
          description: >-
            For [Nucleus
            sampling](https://ai.google.dev/gemini-api/docs/prompting-strategies#top-p).
            Nucleus sampling considers the smallest set of tokens whose
            probability sum is at least `top_p`. This value specifies default to
            be used by the backend while making the call to the model.
          format: float
          type: number
        version:
          description: >-
            Required. The version number of the model. This represents the major
            version (`1.0` or `1.5`)
          type: string
      type: object
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          $ref: '#/components/schemas/Status'
          description: >-
            The error result of the operation in case of failure or
            cancellation.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
      type: object
    Part:
      description: >-
        A datatype containing media that is part of a multi-part `Content`
        message. A `Part` consists of data which has an associated datatype. A
        `Part` can only contain one of the accepted types in `Part.data`. A
        `Part` must have a fixed IANA MIME type identifying the type and subtype
        of the media if the `inline_data` field is filled with raw bytes.
      properties:
        inlineData:
          $ref: '#/components/schemas/Blob'
          description: Inline media bytes.
        text:
          description: Inline text.
          type: string
      type: object
    PromptFeedback:
      description: >-
        A set of the feedback metadata the prompt specified in
        `GenerateContentRequest.content`.
      properties:
        blockReason:
          description: >-
            Optional. If set, the prompt was blocked and no candidates are
            returned. Rephrase the prompt.
          enum:
            - BLOCK_REASON_UNSPECIFIED
            - SAFETY
            - OTHER
            - BLOCKLIST
            - PROHIBITED_CONTENT
          type: string
        safetyRatings:
          description: >-
            Ratings for safety of the prompt. There is at most one rating per
            category.
          items:
            $ref: '#/components/schemas/SafetyRating'
          type: array
      type: object
    RetrievalMetadata:
      description: Metadata related to retrieval in the grounding flow.
      properties:
        googleSearchDynamicRetrievalScore:
          description: >-
            Optional. Score indicating how likely information from google search
            could help answer the prompt. The score is in the range [0, 1],
            where 0 is the least likely and 1 is the most likely. This score is
            only populated when google search grounding and dynamic retrieval is
            enabled. It will be compared to the threshold to determine whether
            to trigger google search.
          format: float
          type: number
      type: object
    SafetyRating:
      description: >-
        Safety rating for a piece of content. The safety rating contains the
        category of harm and the harm probability level in that category for a
        piece of content. Content is classified for safety across a number of
        harm categories and the probability of the harm classification is
        included here.
      properties:
        blocked:
          description: Was this content blocked because of this rating?
          type: boolean
        category:
          description: Required. The category for this rating.
          enum:
            - HARM_CATEGORY_UNSPECIFIED
            - HARM_CATEGORY_DEROGATORY
            - HARM_CATEGORY_TOXICITY
            - HARM_CATEGORY_VIOLENCE
            - HARM_CATEGORY_SEXUAL
            - HARM_CATEGORY_MEDICAL
            - HARM_CATEGORY_DANGEROUS
            - HARM_CATEGORY_HARASSMENT
            - HARM_CATEGORY_HATE_SPEECH
            - HARM_CATEGORY_SEXUALLY_EXPLICIT
            - HARM_CATEGORY_DANGEROUS_CONTENT
            - HARM_CATEGORY_CIVIC_INTEGRITY
          type: string
        probability:
          description: Required. The probability of harm for this content.
          enum:
            - HARM_PROBABILITY_UNSPECIFIED
            - NEGLIGIBLE
            - LOW
            - MEDIUM
            - HIGH
          type: string
      type: object
    SafetySetting:
      description: >-
        Safety setting, affecting the safety-blocking behavior. Passing a safety
        setting for a category changes the allowed probability that content is
        blocked.
      properties:
        category:
          description: Required. The category for this setting.
          enum:
            - HARM_CATEGORY_UNSPECIFIED
            - HARM_CATEGORY_DEROGATORY
            - HARM_CATEGORY_TOXICITY
            - HARM_CATEGORY_VIOLENCE
            - HARM_CATEGORY_SEXUAL
            - HARM_CATEGORY_MEDICAL
            - HARM_CATEGORY_DANGEROUS
            - HARM_CATEGORY_HARASSMENT
            - HARM_CATEGORY_HATE_SPEECH
            - HARM_CATEGORY_SEXUALLY_EXPLICIT
            - HARM_CATEGORY_DANGEROUS_CONTENT
            - HARM_CATEGORY_CIVIC_INTEGRITY
          type: string
        threshold:
          description: >-
            Required. Controls the probability threshold at which harm is
            blocked.
          enum:
            - HARM_BLOCK_THRESHOLD_UNSPECIFIED
            - BLOCK_LOW_AND_ABOVE
            - BLOCK_MEDIUM_AND_ABOVE
            - BLOCK_ONLY_HIGH
            - BLOCK_NONE
            - 'OFF'
          type: string
      type: object
    SearchEntryPoint:
      description: Google search entry point.
      properties:
        renderedContent:
          description: >-
            Optional. Web content snippet that can be embedded in a web page or
            an app webview.
          type: string
        sdkBlob:
          description: Optional. Base64 encoded JSON representing array of tuple.
          format: byte
          type: string
      type: object
    Segment:
      description: Segment of the content.
      properties:
        endIndex:
          description: >-
            Output only. End index in the given Part, measured in bytes. Offset
            from the start of the Part, exclusive, starting at zero.
          format: int32
          readOnly: true
          type: integer
        partIndex:
          description: >-
            Output only. The index of a Part object within its parent Content
            object.
          format: int32
          readOnly: true
          type: integer
        startIndex:
          description: >-
            Output only. Start index in the given Part, measured in bytes.
            Offset from the start of the Part, inclusive, starting at zero.
          format: int32
          readOnly: true
          type: integer
        text:
          description: >-
            Output only. The text corresponding to the segment from the
            response.
          readOnly: true
          type: string
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    TopCandidates:
      description: Candidates with top log probabilities at each decoding step.
      properties:
        candidates:
          description: Sorted by log probability in descending order.
          items:
            $ref: '#/components/schemas/LogprobsResultCandidate'
          type: array
      type: object
    TuningSnapshot:
      description: Record for a single tuning step.
      properties:
        computeTime:
          description: Output only. The timestamp when this metric was computed.
          format: google-datetime
          readOnly: true
          type: string
        epoch:
          description: Output only. The epoch this step was part of.
          format: int32
          readOnly: true
          type: integer
        meanLoss:
          description: Output only. The mean loss of the training examples for this step.
          format: float
          readOnly: true
          type: number
        step:
          description: Output only. The tuning step.
          format: int32
          readOnly: true
          type: integer
      type: object
    UsageMetadata:
      description: Metadata on the generation request's token usage.
      properties:
        candidatesTokenCount:
          description: Total number of tokens across all the generated response candidates.
          format: int32
          type: integer
        promptTokenCount:
          description: >-
            Number of tokens in the prompt. When `cached_content` is set, this
            is still the total effective prompt size meaning this includes the
            number of tokens in the cached content.
          format: int32
          type: integer
        totalTokenCount:
          description: >-
            Total token count for the generation request (prompt + response
            candidates).
          format: int32
          type: integer
      type: object
    Web:
      description: Chunk from the web.
      properties:
        title:
          description: Title of the chunk.
          type: string
        uri:
          description: URI reference of the chunk.
          type: string
      type: object
externalDocs:
  url: 'https://developers.generativeai.google/api'
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: >-
    The Gemini API allows developers to build generative AI applications using
    Gemini models. Gemini is our most capable model, built from the ground up to
    be multimodal. It can generalize and seamlessly understand, operate across,
    and combine different types of information including language, images,
    audio, video, and code. You can use the Gemini API for use cases like
    reasoning across text and images, content generation, dialogue agents,
    summarization and classification systems, and more.
  license:
    name: Creative Commons Attribution 3.0
    url: 'http://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://developers.google.com/terms/'
  title: Generative Language API
  version: v1
openapi: 3.0.0
paths:
  /v1/models:
    get:
      description: >-
        Lists the
        [`Model`s](https://ai.google.dev/gemini-api/docs/models/gemini)
        available through the Gemini API.
      operationId: generativelanguage.models.list
      parameters:
        - description: >-
            The maximum number of `Models` to return (per page). If unspecified,
            50 models will be returned per page. This method returns at most
            1000 models per page, even if you pass a larger page_size.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: >-
            A page token, received from a previous `ListModels` call. Provide
            the `page_token` returned by one request as an argument to the next
            request to retrieve the next page. When paginating, all other
            parameters provided to `ListModels` must match the call that
            provided the page token.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
          description: Successful response
      tags:
        - models
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
  '/v1/{model}:batchEmbedContents':
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Generates multiple embedding vectors from the input `Content` which
        consists of a batch of strings represented as `EmbedContentRequest`
        objects.
      operationId: generativelanguage.models.batchEmbedContents
      parameters:
        - description: >-
            Required. The model's resource name. This serves as an ID for the
            Model to use. This name should match a model name returned by the
            `ListModels` method. Format: `models/{model}`
          in: path
          name: model
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchEmbedContentsRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BatchEmbedContentsResponse'
          description: Successful response
      tags:
        - models
  '/v1/{model}:countTokens':
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Runs a model's tokenizer on input `Content` and returns the token count.
        Refer to the [tokens
        guide](https://ai.google.dev/gemini-api/docs/tokens) to learn more about
        tokens.
      operationId: generativelanguage.models.countTokens
      parameters:
        - description: >-
            Required. The model's resource name. This serves as an ID for the
            Model to use. This name should match a model name returned by the
            `ListModels` method. Format: `models/{model}`
          in: path
          name: model
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTokensRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CountTokensResponse'
          description: Successful response
      tags:
        - models
  '/v1/{model}:embedContent':
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Generates a text embedding vector from the input `Content` using the
        specified [Gemini Embedding
        model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).
      operationId: generativelanguage.models.embedContent
      parameters:
        - description: >-
            Required. The model's resource name. This serves as an ID for the
            Model to use. This name should match a model name returned by the
            `ListModels` method. Format: `models/{model}`
          in: path
          name: model
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedContentRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmbedContentResponse'
          description: Successful response
      tags:
        - models
  '/v1/{model}:generateContent':
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Generates a model response given an input `GenerateContentRequest`.
        Refer to the [text generation
        guide](https://ai.google.dev/gemini-api/docs/text-generation) for
        detailed usage information. Input capabilities differ between models,
        including tuned models. Refer to the [model
        guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning
        guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.
      operationId: generativelanguage.models.generateContent
      parameters:
        - description: >-
            Required. The name of the `Model` to use for generating the
            completion. Format: `models/{model}`.
          in: path
          name: model
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateContentRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateContentResponse'
          description: Successful response
      tags:
        - models
  '/v1/{model}:streamGenerateContent':
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Generates a [streamed
        response](https://ai.google.dev/gemini-api/docs/text-generation?lang=python#generate-a-text-stream)
        from the model given an input `GenerateContentRequest`.
      operationId: generativelanguage.models.streamGenerateContent
      parameters:
        - description: >-
            Required. The name of the `Model` to use for generating the
            completion. Format: `models/{model}`.
          in: path
          name: model
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateContentRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateContentResponse'
          description: Successful response
      tags:
        - models
  '/v1/{name}':
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: generativelanguage.operations.delete
      parameters:
        - description: The name of the operation resource to be deleted.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Empty'
          description: Successful response
      tags:
        - operations
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: generativelanguage.models.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The standard list filter.
          in: query
          name: filter
          schema:
            type: string
        - description: The standard list page size.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The standard list page token.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Operation'
          description: Successful response
      tags:
        - models
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
  '/v1/{name}/operations':
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: generativelanguage.models.operations.list
      parameters:
        - description: The name of the operation's parent resource.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The standard list filter.
          in: query
          name: filter
          schema:
            type: string
        - description: The standard list page size.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The standard list page token.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
          description: Successful response
      tags:
        - models
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
  '/v1/{name}:cancel':
    parameters:
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: generativelanguage.tunedModels.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Empty'
          description: Successful response
      tags:
        - tunedModels
servers:
  - url: 'https://generativelanguage.googleapis.com/'
tags:
  - name: operations
  - name: tunedModels
  - name: generatedFiles
  - name: models